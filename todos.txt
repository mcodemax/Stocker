Capstone steps:

-implement a function that will be put in most routes to ensure the user is logged in
-vizio your routes n stuff

Make this a stretch goal(make base firstline functionality app first b4 doing this stretch goal)(stretch goal):
-since can only get 5 charts, making do caching of data
-all user requests returned from application 
-heroku might give trouble for background processes, to implement this, so might have to ditch


API Issues: 5 requests/min


Todos to implement:



-after a page using route using (ditch for right now)
    -hide the "add ticker" button for 20 seconds so the API doesn't crash, implement in js?
    

- Change chartjs text colors from grey to something more readible


{{ | length }} template stuff to make length or something for ref


-----

stockermainbkrnd taken from (Photo: Getty Images)

-stocker homepage change to financial imagery



script.js:
//These functions outside the "viewdid load" type function for making chartjs charts is 
//fine stylistically to be seperated from the other auxialliary functions

models.py :
                       # don't have two primary keys
                       #https://flask-sqlalchemy.palletsprojects.com/en/2.x/models/
                       #see above on compound primary keys

app.py
CORS(app) #https://flask-cors.readthedocs.io/en/latest/

# https://github.com/mcodemax/Lucky_Number_Flask_2/blob/master/lucky-nums/app.py refer for api calls
